Create a class ApiKeyHandler and add in Global.asax 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Http;
using System.Web.Mvc;
using System.Web.Optimization;
using System.Web.Routing;
using APITesting.App_Start;


namespace APITesting
{
    public class WebApiApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();
            GlobalConfiguration.Configure(WebApiConfig.Register);
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);

            GlobalConfiguration.Configuration.MessageHandlers.Add(new ApiKeyHandler());
        }

        
    }
}
--------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using System.Net;

namespace APITesting.App_Start
{
    public class ApiKeyHandler : DelegatingHandler
    {
        private const string APIKeyToCheck = "fixdialkeyJHHJKHGFGFG";

        protected override async Task<HttpResponseMessage> SendAsync (HttpRequestMessage httpRequestMessage, CancellationToken cancellationToken)
        {
            bool validkey = false;
            IEnumerable<string> requestHeaders;
            var checkApiKeyExists = httpRequestMessage.Headers.TryGetValues("APIKey", out requestHeaders);
            if (checkApiKeyExists)
            {
                if (requestHeaders.FirstOrDefault().Equals(APIKeyToCheck))
                {
                    validkey = true;
                }
            }
                if(!validkey)
                {
                    return httpRequestMessage.CreateResponse(HttpStatusCode.Forbidden, "Invalid Api Key");

                }

                var response = await base.SendAsync(httpRequestMessage, cancellationToken);
                return response;
            }
        }
    }
